#!/usr/bin/env python

from random import getrandbits, randrange
import logging
from tokenize import String

def countSetBits(n):
    count = 0
    while (n):
        count += n & 1
        n >>= 1
    return count

def is_prime(n,k=32):
    logging.debug(f"n={n},k={k}")
    if n <=3:
        if n>=2:
            logging.debug("2 or 3")
            return True
        else:
            logging.debug("< 2")
            return False
    
    if n % 2 == 0:
        logging.debug("n is even")
        return False

    # Find d and r
    d = n - 1
    r = 0

    ## Begin loop    
    d = d//2
    r = r + 1
    logging.debug(f"1. n-1 loop => d={d},r={r}")
    while d % 2 == 0 and d!= 0:        
        d = d//2
        r = r + 1
        logging.debug(f"1. n-1 loop => d={d},r={r}")
    
    for _ in range(k):
        a = randrange(2,n-2)
        x = pow(a,d,n)
        logging.debug(f"a={a},x={x}")
        if x == 1 or x == n - 1:
            logging.debug("x == 1 or x == n - 1")
            continue
        broke = False
        for i in range(r-1):
            x = pow(x,2,n)
            logging.debug(f"i={i} x={x}")
            if x == 1:
                logging.debug("x == 1")
                return False
            if x == n-1:
                logging.debug("x == n - 1")
                broke = True
                break
        if not broke:
            logging.debug("Not broke")
            return False #Â if we finish the inner loop, number is composite

    return True

def genprime(l):
    n=getrandbits(l) | (1 + 2**(l - 1))
    while not is_prime(n):
        n += 2
    return n

def egcd(b, a):
    x0, x1, y0, y1 = 1, 0, 0, 1
    while a != 0:
        q, b, a = b // a, a, b % a
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1
    return b, x0, y0


def genmod(p, q):
    phi = (p - 1) * (q - 1)

    e = randrange(2, phi - 1)
    r,u,v = egcd(e, phi)
    while r != 1:
        e = randrange(2, phi - 1)
        r,u,v = egcd(e, phi)
        logging.debug(r,u,v)

    if u < 0:
        logging.debug("u is negative")
        k = 1
        while u + k * phi < 2 and u + k * phi > phi:
            k += 1
        logging.debug(f"k={k}")
        u = u + k * phi

    M = p * q

    logging.debug(f"Modulus size: {countSetBits(M)}")
    return (M,e), u 

def enc(m,pkey):
    M,e = pkey
    return pow(m,e,M)

def dec(c,pkey,skey):
    M,_ = pkey
    return pow(c,skey,M)

def encmsg(s,pkey):
    res = []
    if type(s) == String:
        for c in s:
            res.append(enc(ord(c),pkey))
    else:
        for c in s:
            res.append(enc(c,pkey))
    return res

def decmsg(s,pkey,skey):
    res = []
    for i in s:
        res.append(dec(i,pkey,skey))
    res = list(map(chr,res))
    resf="".join(res)    
    return resf.encode('latin-1')

def keygen(l):
    p = genprime(l)
    q = genprime(l)
    return genmod(p,q)

if __name__ == "__main__":
    import sys
    import getopt

    logging.basicConfig(format='%(levelname)-5s : %(message)s',level=logging.INFO)

    def usage():
        print(f"Usage : {sys.argv[0]} --prime ") 

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'p:g:m:k:hdt', ['prime=','genprime=','genmod=','genkey=','enc=','pkey=','skey=',"dec=","test", 'help','debug'])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    prime = None
    genp = None
    genm = None
    pkey = None
    skey = None
    encMsg = None
    decMsg = None
    test = None


    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            sys.exit(2)
        elif opt in ('-p', '--params'):
            prime = int(arg)
        elif opt in ('-g', '--genprime'):
            genp = int(arg)
        elif opt in ('-m', '--genmod'):
            genm = tuple(map((lambda x: int(x)),arg.split(",")))
        elif opt in ('-k', '--genkey'):
            genp = int(arg)
        elif opt in ('-t', '--test'):
            test=True
        elif opt in ('--enc'):
            encMsg = arg
        elif opt in ('--dec'):
            decMsg = arg
        elif opt in ('--pkey'):
            pkey = tuple(map((lambda x: int(x)),arg.split(",")))
        elif opt in ('--skey'):
            skey = int(arg)
        elif opt in ('-d','--debug'):
            logging.getLogger().setLevel(logging.DEBUG)
        else:
            usage()
            sys.exit(2)

    if prime != None:
        logging.info(is_prime(prime))

    if genp != None:
        logging.info(genprime(genp))

    if genm != None:
        logging.info(genmod(*genm))

    if encMsg != None:
        if pkey == None:
            (M,e),u = keygen(32)
            s = encmsg(encMsg,(M,e))
            logging.info(s)
            s = decmsg(s,(M,e),u)
            logging.info(s)

    if test:

        logging.info(is_prime(16157387885063800092468972531095442600227637936690303362357377535130907802167))
        logging.info(encmsg(b'\x0c\x8c}', (17862715358478199014381144393172131807308492962251889159429428049596051194922049076002858203768174447370059771770876622129372276606265844187258310390952611957889235040945333642520097173964599238047975455108797511779444714827686893308310198245584741933142342473303801998835888229249714429761418287314127502877557519697047137198148166813964288797723770070837268834008542006168976306470251451656337619855842931219397043576690780001767439975763933387611573004522617269689180961869963890371094571132973138435542664781303597980873792984062039638591521696462996784892442920412257383322775674915933005154844202839298406118257, 8902276007806572735720492470139980142788061205441613881471986088002504402409231670378157104445841287086891254741045216577433219222946531470779790304637702811509488261523653604268993436201659214701324176144775168094745716654022767345286790845051962170425581565976911327967201899371634090265571392275679639866447447749685790263928367500755713092327315325922772940175911964674378919236425739798876710508008301101647286726598554752872578375550539710414329461858637781095889648795634549433807572836045630681025669990105214322459686151161277048953675204118350015431620874554116413727697117700810945510917055524445954381511)))

        logging.info(decmsg([11666312114238547830616966985400472163275682068055815392541046874501413946455635203890758507850706853533124881711444887587012299550118305967469883688442239671153263612501282874378046733889082667908264714378145396079261268199542043047558154579668158096424705022353241435221924018923016449744027006299190620398374369058371588804039450492407039286843811039811268625530360095761205656877691115686877502218990219814765396931238819930902670225613556881683984226090396946462637568893715529222236455689528719015427906668891923623922824580318745725700499817287631409081253801146216626880461688032275675539774503839894970889366, 14681295124922107689587346655268619004571578482143407993699271789441584349474563748562954379680648579950847179716278035951588051844962694061132100326897231651586983103917033608264007112828105548976968283077031942573929639261110364042822806970291637297835408580405222394621653832187061124788563807468063625445710774099087269362424796542380737013366893514708545195733747091863486524637656101341380962281006627656047284806094828158899468269105408699875622924414125687443359271140499040033520708397397678170075782553646074841716253307395847344814143073170326735196963956248362374280359249244532221913613668904868746741465, 5766029405563089274620584362071938963885307307062238887059640227275159209752784010389136133872578951322329525718882790236204951452904179471329053969715250902352399354369611933955463766589643390415543700670959263746327586003545500168955270767929918494914197535065867445408418316728217084971645641670140581188430197552213972331484364575833711116146747303791209363649845878653172836247793405528192406494486746896600171656221782968194116027556668683895957776058975901747796888318634354304846013198653855991950960313587290634278464757738966942466915296859170579909843032900660521543424333942734203157522536934380525692833], (17862715358478199014381144393172131807308492962251889159429428049596051194922049076002858203768174447370059771770876622129372276606265844187258310390952611957889235040945333642520097173964599238047975455108797511779444714827686893308310198245584741933142342473303801998835888229249714429761418287314127502877557519697047137198148166813964288797723770070837268834008542006168976306470251451656337619855842931219397043576690780001767439975763933387611573004522617269689180961869963890371094571132973138435542664781303597980873792984062039638591521696462996784892442920412257383322775674915933005154844202839298406118257, 8902276007806572735720492470139980142788061205441613881471986088002504402409231670378157104445841287086891254741045216577433219222946531470779790304637702811509488261523653604268993436201659214701324176144775168094745716654022767345286790845051962170425581565976911327967201899371634090265571392275679639866447447749685790263928367500755713092327315325922772940175911964674378919236425739798876710508008301101647286726598554752872578375550539710414329461858637781095889648795634549433807572836045630681025669990105214322459686151161277048953675204118350015431620874554116413727697117700810945510917055524445954381511), 16360850045056076939812293711337452272081820523099196298289540879036458783491861129615767260608166345168612869537633937242781581809633613460620621895574392710626363329185324354005641135262437139465100943772485797533047829845313074616654472280688624065873583861517065426821136610246356378514638521549983647118849293611335115651093397361348929919726009119323375809755348019951464338599868474772269242944264536685537688104552100611767567170221525914353733384391575949383237185489826366088893213829141127921218213327150205536145585456824987157729099120218701746619563194273753460531430858032690781938766758254527431245111))
    
    logging.info(keygen(16))